generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role          @default(USER) // Added role field
  userPlatform   UserPlatform?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt // Fixed naming inconsistency
  phone          String?
  accounts       Account[]
  sessions       Session[]
  orders         OrderItem[] // Added relation for User to Store
}

enum UserPlatform {
  WEBSITE
  MOBILEAPP
  DASHBOARD
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  AdminOne
  AdminTwo
  MANAGER
  OWNER
}

model HeroSection {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  slug String @unique

  nameEn  String
  nameAr  String
  titleEn String
  titleAr String

  subtitleEn String?
  subtitleAr String?

  descEn   String?
  descAr   String?
  imageUrl String?
  bgUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============ HOME Page Structure - START =========================

model Banner {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  nameEn       String
  nameAr       String
  titleEn      String
  titleAr      String
  subtitleEn   String
  subtitleAr   String
  link         String?
  bannerImages BannerImages[]
  isFeatured   Boolean        @default(false)
  isArchived   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model BannerImages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerId  String   @db.ObjectId
  Banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slugAr    String    @unique
  slugEn    String    @unique
  products  Product[] @relation("CategoriesToProduct")
  nameEn    String
  nameAr    String
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Branches {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  nameEn   String
  nameAr   String
  titleEn  String
  titleAr  String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductAddtions {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  titleEn     String
  titleAr     String
  imageUrl    String
  productItem ProductItem[]
  products    Product[]     @relation("productAddtionsToProduct")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductItem {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  nameEn            String
  nameAr            String
  productCategoryId String          @db.ObjectId
  productCategory   ProductCategory @relation("CategoryToItemsCategory", fields: [productCategoryId], references: [id], onDelete: Cascade)
  productAddtionsId String          @db.ObjectId
  ProductAddtions   ProductAddtions @relation(fields: [productAddtionsId], references: [id], onDelete: Cascade)
  imageUrl          String
  price             Int?
  quantity          Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([productAddtionsId])
  @@index([productCategoryId])
}

model ProductCategory {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  ProductItem ProductItem[] @relation("CategoryToItemsCategory")
  nameEn      String
  nameAr      String
  imageUrl    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Product {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  slugAr            String           @unique
  slugEn            String           @unique
  categoriesId      String           @db.ObjectId
  categories        Categories       @relation("CategoriesToProduct", fields: [categoriesId], references: [id])
  productAddtionsId String?          @db.ObjectId
  productAddtions   ProductAddtions? @relation("productAddtionsToProduct", fields: [productAddtionsId], references: [id])
  titleEn           String
  titleAr           String
  subtitleEn        String
  subtitleAr        String
  descriptionEn     String
  descriptionAr     String
  price             Int
  offer             Int?
  offerPrice        Int?
  quantity          Int?
  isFeatured        Boolean          @default(false)
  isBestSeller      Boolean          @default(false)
  isArchived        Boolean          @default(false)

  images Images[]

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoriesId])
  @@index([productAddtionsId])
}

model Images {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// ============ HOME Page Structure - END =========================

// ============ New Page Structure - START =========================

// ============ New Page Structure - END =========================

// ============ ABOUT Page Structure - START =========================

// ============ ABOUT Page Structure - END =========================

// ============ Careers Page Structure - START =========================
// ============ Careers Page Structure - END =========================

// _____________ When Make Ordring  _______________________

model Order {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  isPaid         Boolean         @default(false)
  status         OrderStatus?    @default(PENDING)
  deliveryStatus DeliveryStatus?
  paymentMethod  PaymentMethod?
  totalPrice     Int?

  name    String @default("")
  phone   String @default("")
  address String @default("")
  zipCode String @default("")
  city    String @default("")
  branch  String @default("")

  orderItem OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String  @db.ObjectId
  order      Order   @relation(fields: [orderId], references: [id])
  userId     String? @db.ObjectId
  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity   Int?
  totalPrice Int?
  productId  String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  PAYMENT_AT_BRANCH
  WHATSUP
  STRIPE
  PAYMOB
}

// ============ NOTIFICATION SYSTEM =========================
